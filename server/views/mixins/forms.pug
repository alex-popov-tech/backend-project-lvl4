- const getEntityName = (entity) => entity.constructor.name
- const getFieldName = (property) => `data[${property}]`
- const getFieldId = (property) => `data_${property}`

mixin flash(messages = [])
  .container.wrapper.flex
    each texts, type in messages
      each text in texts
        div.alert(class=`alert-${type}`)= text

mixin formFor()
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - entityName = getEntityName(entity)
  - formName = getFieldName(propertyName)
  - formId = getFieldId(propertyName)
  - propertyErrors = errors[propertyName]
  - presetValue = entity[propertyName] || ''
  .form-group
    label(
      for= formId
    )= t(`models.${entityName}.${propertyName}`)
    input.form-control(
      id= formId
      name= formName
      class=(propertyErrors && 'is-invalid')
      value=presetValue
    )&attributes(attributes)
    if propertyErrors
      .invalid-feedback=propertyErrors.map(({ message }) => message).join('\n')

mixin textarea(entity, propertyName, errors = {})
  - entityName = getEntityName(entity)
  - formName = getFieldName(propertyName)
  - formId = getFieldId(propertyName)
  - propertyErrors = errors[propertyName]
  - presetValue = entity[propertyName] || ''
  .form-group
    label(
      for= formId
    )= t(`models.${entityName}.${propertyName}`)
    textarea.form-control(
      id= formId
      name= formName
      class=(propertyErrors && 'is-invalid')
    )&attributes(attributes)= presetValue
    if propertyErrors
      .invalid-feedback=propertyErrors.map(({ message }) => message).join('\n')

mixin select(entity, propertyName, values, options = {}, errors = {})
  - formName = getFieldName(propertyName)
  - formId = getFieldId(propertyName)
  - entityName = getEntityName(entity)
  - isMultiselect = options.isMultiselect
  - propertyErrors = errors[propertyName]
  - propertyValues = values
  - presetValues = entity[propertyName] || (isMultiselect ? [] : '')
  .form-group
    label(
      for= formId
    )= t(`models.${entityName}.${propertyName}`)
    select(
      id= formId
      name= formName
      class='form-control'
      multiple=isMultiselect
      class=(propertyErrors && 'is-invalid')
    )&attributes(attributes)
      if !isMultiselect
        option
      each it in values
          - isSelected = isMultiselect ? presetValues.includes(it.id) : presetValues === it.id
          option(value=it.id selected=isSelected)= it.toString()
    if propertyErrors
      .invalid-feedback=propertyErrors.map(({ message }) => message).join('\n')

mixin checkbox(entity, propertyName, errors)
  - propertyErrors = errors[propertyName]
  - formName = getFieldName(propertyName)
  - formId = getFieldId(propertyName)
  - entityName = getEntityName(entity)
  - value = !!entity[propertyName]
  .form-group.form-check
    input(
      id= formId
      name= formName
      class='form-check-input'
      type='checkbox'
      checked=value
    )&attributes(attributes)
    label(
      for= formId
    )= t(`models.${entityName}.${propertyName}`)
    if propertyErrors
      .invalid-feedback=propertyErrors.map(({ message }) => message).join('\n')

mixin submit()
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=`${action}?_method=${method}`, method="post")
    input(type='submit')&attributes(attributes)

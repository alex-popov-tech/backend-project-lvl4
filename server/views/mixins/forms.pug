- const getInputName = (entity, property) => `${entity.constructor.name.toLowerCase()}[${property}]`

mixin flash(messages = [])
  .container.wrapper.flex
    each texts, type in messages
      each text in texts
        div.alert(class=`alert-${type}`)= text + type

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin select(name, options, errors= [])
  .form-group(class=(errors && 'has-danger'))
    label=name
    select(
      name=name
      class='form-control'
      value=(value || '')
    )&attributes(attributes)
      each option in options
        option(value=option.id)= option.toString()
    if errors.length
      .form-control-feedback=errors.map(({ message }) => message).join('\n')

mixin multiselect(name, options, errors= [])
  .form-group(class=(errors && 'has-danger'))
    label=name
    select(
      name=name
      class='form-control'
      multiple
    )&attributes(attributes)
      each option in options
        option(value=option.id)= option.toString()
    if errors.length
      .form-control-feedback=errors.map(({ message }) => message).join('\n')

mixin input(name, value = '', errors = [])
  .form-group(class=(errors && 'has-danger'))
    label=name
    input(
      name=name
      class='form-control'
      value=(value || '')
    )&attributes(attributes)
    if errors.length
      .form-control-feedback=errors.map(({ message }) => message).join('\n')

mixin submit()
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
